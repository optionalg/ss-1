SET(CMAKE_C_FLAGS_DEBUG "${CMAKE_C_FLAGS_DEBUG} -O0 -g")

FIND_PATH(
    LIBEV_INCLUDE NAMES ev.h
    PATH_SUFFIXES ev libev
    PATHS /usr/include /usr/local/include
    )
IF (LIBEV_INCLUDE)
    INCLUDE_DIRECTORIES(${LIBEV_INCLUDE})
ENDIF()

FIND_LIBRARY(
    LIBEV_LIBRARY NAMES ev
    PATHS /usr/lib /usr/local/lib /usr/lib64 /usr/local/lib64
    )
IF (LIBEV_LIBRARY)
    GET_FILENAME_COMPONENT(LIBEV_LIBDIR ${LIBEV_LIBRARY} PATH)
    LINK_DIRECTORIES(${LIBEV_LIBDIR})
ENDIF()

SET(SS_PUBLIC_HEADERS ss.h)
SET(SS_PRIVATE_HEADERS thread.h logger.h)
SET(SS_HEADERS ${SS_PUBLIC_HEADERS} ${SS_PRIVATE_HEADERS})
SET(SS_SOURCES ${SS_HEADERS} ss.c thread.c logger.c)

SET(SS_SHARED_LIBRARY ss_shared_library)
SET(SS_SHARED_LIBRARY_OUTPUT ss)
ADD_LIBRARY(${SS_SHARED_LIBRARY} SHARED ${SS_SOURCES})
SET_TARGET_PROPERTIES(${SS_SHARED_LIBRARY} PROPERTIES OUTPUT_NAME ${SS_SHARED_LIBRARY_OUTPUT})
TARGET_LINK_LIBRARIES(${SS_SHARED_LIBRARY} ev pthread)

SET(SS_STATIC_LIBRARY ss_static_library)
SET(SS_STATIC_LIBRARY_OUTPUT ss)
ADD_LIBRARY(${SS_STATIC_LIBRARY} STATIC ${SS_SOURCES})
SET_TARGET_PROPERTIES(${SS_STATIC_LIBRARY} PROPERTIES OUTPUT_NAME ${SS_STATIC_LIBRARY_OUTPUT})
TARGET_LINK_LIBRARIES(${SS_STATIC_LIBRARY} ev pthread)

SET(SS_EXECUTABLE ss_executable)
SET(SS_EXECUTABLE_OUTPUT ss)
ADD_EXECUTABLE(${SS_EXECUTABLE} ${SS_SOURCES} main.c)
SET_TARGET_PROPERTIES(${SS_EXECUTABLE} PROPERTIES OUTPUT_NAME ${SS_EXECUTABLE_OUTPUT})
TARGET_LINK_LIBRARIES(${SS_EXECUTABLE} ${SS_STATIC_LIBRARY})
